# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquaautopilot/UberpilotStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class UberpilotStatus(genpy.Message):
  _md5sum = "9759835ed61618efecb1f4276b2aa836"
  _type = "aquaautopilot/UberpilotStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 roll_p_gain
float64 pitch_p_gain
float64 yaw_p_gain
float64 roll_i_gain
float64 pitch_i_gain
float64 yaw_i_gain
float64 roll_d_gain
float64 pitch_d_gain
float64 yaw_d_gain
float64 roll_const_gain

float64 roll_error
float64 pitch_error
float64 yaw_error
float64 depth_error

float64 roll_error_integral
float64 pitch_error_integral
float64 yaw_error_integral

float64 roll_p_contrib
float64 pitch_p_contrib
float64 yaw_p_contrib
float64 roll_i_contrib
float64 pitch_i_contrib
float64 yaw_i_contrib
float64 roll_d_contrib
float64 pitch_d_contrib
float64 yaw_d_contrib
float64 roll_const_contrib

float64 depth_p_gain
float64 depth_d_gain
float64 depth_derivative
float64 depth_p_contrib
float64 depth_d_contrib

float64 resultant_roll
float64 resultant_pitch
float64 resultant_yaw

float64 filtered_depth_derivative
float64 depth_d_filter_period

float64 filtered_roll_deriv
float64 filtered_pitch_deriv
float64 filtered_yaw_deriv
float64 roll_d_filter_period
float64 pitch_d_filter_period
float64 yaw_d_filter_period

float64 roll_target
float64 pitch_target
float64 yaw_target

float64 current_roll
float64 current_pitch
float64 current_yaw
"""
  __slots__ = ['roll_p_gain','pitch_p_gain','yaw_p_gain','roll_i_gain','pitch_i_gain','yaw_i_gain','roll_d_gain','pitch_d_gain','yaw_d_gain','roll_const_gain','roll_error','pitch_error','yaw_error','depth_error','roll_error_integral','pitch_error_integral','yaw_error_integral','roll_p_contrib','pitch_p_contrib','yaw_p_contrib','roll_i_contrib','pitch_i_contrib','yaw_i_contrib','roll_d_contrib','pitch_d_contrib','yaw_d_contrib','roll_const_contrib','depth_p_gain','depth_d_gain','depth_derivative','depth_p_contrib','depth_d_contrib','resultant_roll','resultant_pitch','resultant_yaw','filtered_depth_derivative','depth_d_filter_period','filtered_roll_deriv','filtered_pitch_deriv','filtered_yaw_deriv','roll_d_filter_period','pitch_d_filter_period','yaw_d_filter_period','roll_target','pitch_target','yaw_target','current_roll','current_pitch','current_yaw']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       roll_p_gain,pitch_p_gain,yaw_p_gain,roll_i_gain,pitch_i_gain,yaw_i_gain,roll_d_gain,pitch_d_gain,yaw_d_gain,roll_const_gain,roll_error,pitch_error,yaw_error,depth_error,roll_error_integral,pitch_error_integral,yaw_error_integral,roll_p_contrib,pitch_p_contrib,yaw_p_contrib,roll_i_contrib,pitch_i_contrib,yaw_i_contrib,roll_d_contrib,pitch_d_contrib,yaw_d_contrib,roll_const_contrib,depth_p_gain,depth_d_gain,depth_derivative,depth_p_contrib,depth_d_contrib,resultant_roll,resultant_pitch,resultant_yaw,filtered_depth_derivative,depth_d_filter_period,filtered_roll_deriv,filtered_pitch_deriv,filtered_yaw_deriv,roll_d_filter_period,pitch_d_filter_period,yaw_d_filter_period,roll_target,pitch_target,yaw_target,current_roll,current_pitch,current_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UberpilotStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.roll_p_gain is None:
        self.roll_p_gain = 0.
      if self.pitch_p_gain is None:
        self.pitch_p_gain = 0.
      if self.yaw_p_gain is None:
        self.yaw_p_gain = 0.
      if self.roll_i_gain is None:
        self.roll_i_gain = 0.
      if self.pitch_i_gain is None:
        self.pitch_i_gain = 0.
      if self.yaw_i_gain is None:
        self.yaw_i_gain = 0.
      if self.roll_d_gain is None:
        self.roll_d_gain = 0.
      if self.pitch_d_gain is None:
        self.pitch_d_gain = 0.
      if self.yaw_d_gain is None:
        self.yaw_d_gain = 0.
      if self.roll_const_gain is None:
        self.roll_const_gain = 0.
      if self.roll_error is None:
        self.roll_error = 0.
      if self.pitch_error is None:
        self.pitch_error = 0.
      if self.yaw_error is None:
        self.yaw_error = 0.
      if self.depth_error is None:
        self.depth_error = 0.
      if self.roll_error_integral is None:
        self.roll_error_integral = 0.
      if self.pitch_error_integral is None:
        self.pitch_error_integral = 0.
      if self.yaw_error_integral is None:
        self.yaw_error_integral = 0.
      if self.roll_p_contrib is None:
        self.roll_p_contrib = 0.
      if self.pitch_p_contrib is None:
        self.pitch_p_contrib = 0.
      if self.yaw_p_contrib is None:
        self.yaw_p_contrib = 0.
      if self.roll_i_contrib is None:
        self.roll_i_contrib = 0.
      if self.pitch_i_contrib is None:
        self.pitch_i_contrib = 0.
      if self.yaw_i_contrib is None:
        self.yaw_i_contrib = 0.
      if self.roll_d_contrib is None:
        self.roll_d_contrib = 0.
      if self.pitch_d_contrib is None:
        self.pitch_d_contrib = 0.
      if self.yaw_d_contrib is None:
        self.yaw_d_contrib = 0.
      if self.roll_const_contrib is None:
        self.roll_const_contrib = 0.
      if self.depth_p_gain is None:
        self.depth_p_gain = 0.
      if self.depth_d_gain is None:
        self.depth_d_gain = 0.
      if self.depth_derivative is None:
        self.depth_derivative = 0.
      if self.depth_p_contrib is None:
        self.depth_p_contrib = 0.
      if self.depth_d_contrib is None:
        self.depth_d_contrib = 0.
      if self.resultant_roll is None:
        self.resultant_roll = 0.
      if self.resultant_pitch is None:
        self.resultant_pitch = 0.
      if self.resultant_yaw is None:
        self.resultant_yaw = 0.
      if self.filtered_depth_derivative is None:
        self.filtered_depth_derivative = 0.
      if self.depth_d_filter_period is None:
        self.depth_d_filter_period = 0.
      if self.filtered_roll_deriv is None:
        self.filtered_roll_deriv = 0.
      if self.filtered_pitch_deriv is None:
        self.filtered_pitch_deriv = 0.
      if self.filtered_yaw_deriv is None:
        self.filtered_yaw_deriv = 0.
      if self.roll_d_filter_period is None:
        self.roll_d_filter_period = 0.
      if self.pitch_d_filter_period is None:
        self.pitch_d_filter_period = 0.
      if self.yaw_d_filter_period is None:
        self.yaw_d_filter_period = 0.
      if self.roll_target is None:
        self.roll_target = 0.
      if self.pitch_target is None:
        self.pitch_target = 0.
      if self.yaw_target is None:
        self.yaw_target = 0.
      if self.current_roll is None:
        self.current_roll = 0.
      if self.current_pitch is None:
        self.current_pitch = 0.
      if self.current_yaw is None:
        self.current_yaw = 0.
    else:
      self.roll_p_gain = 0.
      self.pitch_p_gain = 0.
      self.yaw_p_gain = 0.
      self.roll_i_gain = 0.
      self.pitch_i_gain = 0.
      self.yaw_i_gain = 0.
      self.roll_d_gain = 0.
      self.pitch_d_gain = 0.
      self.yaw_d_gain = 0.
      self.roll_const_gain = 0.
      self.roll_error = 0.
      self.pitch_error = 0.
      self.yaw_error = 0.
      self.depth_error = 0.
      self.roll_error_integral = 0.
      self.pitch_error_integral = 0.
      self.yaw_error_integral = 0.
      self.roll_p_contrib = 0.
      self.pitch_p_contrib = 0.
      self.yaw_p_contrib = 0.
      self.roll_i_contrib = 0.
      self.pitch_i_contrib = 0.
      self.yaw_i_contrib = 0.
      self.roll_d_contrib = 0.
      self.pitch_d_contrib = 0.
      self.yaw_d_contrib = 0.
      self.roll_const_contrib = 0.
      self.depth_p_gain = 0.
      self.depth_d_gain = 0.
      self.depth_derivative = 0.
      self.depth_p_contrib = 0.
      self.depth_d_contrib = 0.
      self.resultant_roll = 0.
      self.resultant_pitch = 0.
      self.resultant_yaw = 0.
      self.filtered_depth_derivative = 0.
      self.depth_d_filter_period = 0.
      self.filtered_roll_deriv = 0.
      self.filtered_pitch_deriv = 0.
      self.filtered_yaw_deriv = 0.
      self.roll_d_filter_period = 0.
      self.pitch_d_filter_period = 0.
      self.yaw_d_filter_period = 0.
      self.roll_target = 0.
      self.pitch_target = 0.
      self.yaw_target = 0.
      self.current_roll = 0.
      self.current_pitch = 0.
      self.current_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_49d().pack(_x.roll_p_gain, _x.pitch_p_gain, _x.yaw_p_gain, _x.roll_i_gain, _x.pitch_i_gain, _x.yaw_i_gain, _x.roll_d_gain, _x.pitch_d_gain, _x.yaw_d_gain, _x.roll_const_gain, _x.roll_error, _x.pitch_error, _x.yaw_error, _x.depth_error, _x.roll_error_integral, _x.pitch_error_integral, _x.yaw_error_integral, _x.roll_p_contrib, _x.pitch_p_contrib, _x.yaw_p_contrib, _x.roll_i_contrib, _x.pitch_i_contrib, _x.yaw_i_contrib, _x.roll_d_contrib, _x.pitch_d_contrib, _x.yaw_d_contrib, _x.roll_const_contrib, _x.depth_p_gain, _x.depth_d_gain, _x.depth_derivative, _x.depth_p_contrib, _x.depth_d_contrib, _x.resultant_roll, _x.resultant_pitch, _x.resultant_yaw, _x.filtered_depth_derivative, _x.depth_d_filter_period, _x.filtered_roll_deriv, _x.filtered_pitch_deriv, _x.filtered_yaw_deriv, _x.roll_d_filter_period, _x.pitch_d_filter_period, _x.yaw_d_filter_period, _x.roll_target, _x.pitch_target, _x.yaw_target, _x.current_roll, _x.current_pitch, _x.current_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 392
      (_x.roll_p_gain, _x.pitch_p_gain, _x.yaw_p_gain, _x.roll_i_gain, _x.pitch_i_gain, _x.yaw_i_gain, _x.roll_d_gain, _x.pitch_d_gain, _x.yaw_d_gain, _x.roll_const_gain, _x.roll_error, _x.pitch_error, _x.yaw_error, _x.depth_error, _x.roll_error_integral, _x.pitch_error_integral, _x.yaw_error_integral, _x.roll_p_contrib, _x.pitch_p_contrib, _x.yaw_p_contrib, _x.roll_i_contrib, _x.pitch_i_contrib, _x.yaw_i_contrib, _x.roll_d_contrib, _x.pitch_d_contrib, _x.yaw_d_contrib, _x.roll_const_contrib, _x.depth_p_gain, _x.depth_d_gain, _x.depth_derivative, _x.depth_p_contrib, _x.depth_d_contrib, _x.resultant_roll, _x.resultant_pitch, _x.resultant_yaw, _x.filtered_depth_derivative, _x.depth_d_filter_period, _x.filtered_roll_deriv, _x.filtered_pitch_deriv, _x.filtered_yaw_deriv, _x.roll_d_filter_period, _x.pitch_d_filter_period, _x.yaw_d_filter_period, _x.roll_target, _x.pitch_target, _x.yaw_target, _x.current_roll, _x.current_pitch, _x.current_yaw,) = _get_struct_49d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_49d().pack(_x.roll_p_gain, _x.pitch_p_gain, _x.yaw_p_gain, _x.roll_i_gain, _x.pitch_i_gain, _x.yaw_i_gain, _x.roll_d_gain, _x.pitch_d_gain, _x.yaw_d_gain, _x.roll_const_gain, _x.roll_error, _x.pitch_error, _x.yaw_error, _x.depth_error, _x.roll_error_integral, _x.pitch_error_integral, _x.yaw_error_integral, _x.roll_p_contrib, _x.pitch_p_contrib, _x.yaw_p_contrib, _x.roll_i_contrib, _x.pitch_i_contrib, _x.yaw_i_contrib, _x.roll_d_contrib, _x.pitch_d_contrib, _x.yaw_d_contrib, _x.roll_const_contrib, _x.depth_p_gain, _x.depth_d_gain, _x.depth_derivative, _x.depth_p_contrib, _x.depth_d_contrib, _x.resultant_roll, _x.resultant_pitch, _x.resultant_yaw, _x.filtered_depth_derivative, _x.depth_d_filter_period, _x.filtered_roll_deriv, _x.filtered_pitch_deriv, _x.filtered_yaw_deriv, _x.roll_d_filter_period, _x.pitch_d_filter_period, _x.yaw_d_filter_period, _x.roll_target, _x.pitch_target, _x.yaw_target, _x.current_roll, _x.current_pitch, _x.current_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 392
      (_x.roll_p_gain, _x.pitch_p_gain, _x.yaw_p_gain, _x.roll_i_gain, _x.pitch_i_gain, _x.yaw_i_gain, _x.roll_d_gain, _x.pitch_d_gain, _x.yaw_d_gain, _x.roll_const_gain, _x.roll_error, _x.pitch_error, _x.yaw_error, _x.depth_error, _x.roll_error_integral, _x.pitch_error_integral, _x.yaw_error_integral, _x.roll_p_contrib, _x.pitch_p_contrib, _x.yaw_p_contrib, _x.roll_i_contrib, _x.pitch_i_contrib, _x.yaw_i_contrib, _x.roll_d_contrib, _x.pitch_d_contrib, _x.yaw_d_contrib, _x.roll_const_contrib, _x.depth_p_gain, _x.depth_d_gain, _x.depth_derivative, _x.depth_p_contrib, _x.depth_d_contrib, _x.resultant_roll, _x.resultant_pitch, _x.resultant_yaw, _x.filtered_depth_derivative, _x.depth_d_filter_period, _x.filtered_roll_deriv, _x.filtered_pitch_deriv, _x.filtered_yaw_deriv, _x.roll_d_filter_period, _x.pitch_d_filter_period, _x.yaw_d_filter_period, _x.roll_target, _x.pitch_target, _x.yaw_target, _x.current_roll, _x.current_pitch, _x.current_yaw,) = _get_struct_49d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_49d = None
def _get_struct_49d():
    global _struct_49d
    if _struct_49d is None:
        _struct_49d = struct.Struct("<49d")
    return _struct_49d
