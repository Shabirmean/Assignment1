# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/RunSimulationUntilTimeRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RunSimulationUntilTimeRequest(genpy.Message):
  _md5sum = "e9b97c64adca29990ce6f7a0dc757a00"
  _type = "aquacore/RunSimulationUntilTimeRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time desired_time
"""
  __slots__ = ['desired_time']
  _slot_types = ['time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       desired_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunSimulationUntilTimeRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.desired_time is None:
        self.desired_time = genpy.Time()
    else:
      self.desired_time = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.desired_time.secs, _x.desired_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.desired_time is None:
        self.desired_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.desired_time.secs, _x.desired_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.desired_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.desired_time.secs, _x.desired_time.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.desired_time is None:
        self.desired_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.desired_time.secs, _x.desired_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.desired_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/RunSimulationUntilTimeResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import genpy
import sensor_msgs.msg

class RunSimulationUntilTimeResponse(genpy.Message):
  _md5sum = "95407e38eb7e3d32da22f30447fb9d6c"
  _type = "aquacore/RunSimulationUntilTimeResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time timestamp
float64[6] frequencies
float64[6] amplitudes
float64[6] leg_offsets
float64[6] phase_offsets
float64[6] joint_angles
sensor_msgs/Imu imu_data
float64[3] integrated_velocity


================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['timestamp','frequencies','amplitudes','leg_offsets','phase_offsets','joint_angles','imu_data','integrated_velocity']
  _slot_types = ['time','float64[6]','float64[6]','float64[6]','float64[6]','float64[6]','sensor_msgs/Imu','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,frequencies,amplitudes,leg_offsets,phase_offsets,joint_angles,imu_data,integrated_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunSimulationUntilTimeResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.frequencies is None:
        self.frequencies = [0.] * 6
      if self.amplitudes is None:
        self.amplitudes = [0.] * 6
      if self.leg_offsets is None:
        self.leg_offsets = [0.] * 6
      if self.phase_offsets is None:
        self.phase_offsets = [0.] * 6
      if self.joint_angles is None:
        self.joint_angles = [0.] * 6
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.integrated_velocity is None:
        self.integrated_velocity = [0.] * 3
    else:
      self.timestamp = genpy.Time()
      self.frequencies = [0.] * 6
      self.amplitudes = [0.] * 6
      self.leg_offsets = [0.] * 6
      self.phase_offsets = [0.] * 6
      self.joint_angles = [0.] * 6
      self.imu_data = sensor_msgs.msg.Imu()
      self.integrated_velocity = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.timestamp.secs, _x.timestamp.nsecs))
      buff.write(_get_struct_6d().pack(*self.frequencies))
      buff.write(_get_struct_6d().pack(*self.amplitudes))
      buff.write(_get_struct_6d().pack(*self.leg_offsets))
      buff.write(_get_struct_6d().pack(*self.phase_offsets))
      buff.write(_get_struct_6d().pack(*self.joint_angles))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu_data.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.linear_acceleration_covariance))
      buff.write(_get_struct_3d().pack(*self.integrated_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 48
      self.frequencies = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.amplitudes = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.leg_offsets = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.phase_offsets = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joint_angles = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 24
      self.integrated_velocity = _get_struct_3d().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.timestamp.secs, _x.timestamp.nsecs))
      buff.write(self.frequencies.tostring())
      buff.write(self.amplitudes.tostring())
      buff.write(self.leg_offsets.tostring())
      buff.write(self.phase_offsets.tostring())
      buff.write(self.joint_angles.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(self.imu_data.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(self.imu_data.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(self.imu_data.linear_acceleration_covariance.tostring())
      buff.write(self.integrated_velocity.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 48
      self.frequencies = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.amplitudes = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.leg_offsets = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.phase_offsets = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 12
      (_x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 24
      self.integrated_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class RunSimulationUntilTime(object):
  _type          = 'aquacore/RunSimulationUntilTime'
  _md5sum = '458847662e311d516350b4039d9585f1'
  _request_class  = RunSimulationUntilTimeRequest
  _response_class = RunSimulationUntilTimeResponse
