# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/PeriodicLegCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PeriodicLegCommand(genpy.Message):
  _md5sum = "48094d6d773e147611fe2c7c7ff18406"
  _type = "aquacore/PeriodicLegCommand"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message represents the leg command parameterization that was decided by consensus at 
# MRL in July, 2014. The intention is that ROS-coded gaits will publish messages of this
# type, and that the aqua robot as well as its simulator will implement leg motions 
# that follow the requested sinusoidal trajectories.
#
# Author: David Meger
# Date: July 29, 2014 

Header header

#
# The ordering of the 6 legs in all following arrays is:
# 0: front-left
# 1: mid-left
# 2: hind-left
# 3: front-right
# 4: mid-right
# 5: hind-right
#
# The orientation of the leg angles are:
# 0: pointing backwards
# pi: pointing downwards
# 2*pi: pointing forwards
#
# Computation of current leg angle:
# leg_angle = amplitude * cos(2*pi * frequency * dt + phase_offset) + leg_offset
#
# Midoff positioning and velocity modes:
#
# The midoff angle of each leg can be commanded in either position mode or in
# velocity mode. They are implemented as follows:
#
# if leg_velocities[i] != 0:
#   actual leg offset = last internally-stored leg offset + leg_velocities[i]*dt
# else:
#   actual leg offset = leg_offsets[i]

float32[6] amplitudes     # units: rad
float32[6] frequencies    # units: hz
float32[6] phase_offsets  # units: rad
float32[6] leg_offsets    # units: rad
float32[6] leg_velocities # units: rad/s

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','amplitudes','frequencies','phase_offsets','leg_offsets','leg_velocities']
  _slot_types = ['std_msgs/Header','float32[6]','float32[6]','float32[6]','float32[6]','float32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,amplitudes,frequencies,phase_offsets,leg_offsets,leg_velocities

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PeriodicLegCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.amplitudes is None:
        self.amplitudes = [0.] * 6
      if self.frequencies is None:
        self.frequencies = [0.] * 6
      if self.phase_offsets is None:
        self.phase_offsets = [0.] * 6
      if self.leg_offsets is None:
        self.leg_offsets = [0.] * 6
      if self.leg_velocities is None:
        self.leg_velocities = [0.] * 6
    else:
      self.header = std_msgs.msg.Header()
      self.amplitudes = [0.] * 6
      self.frequencies = [0.] * 6
      self.phase_offsets = [0.] * 6
      self.leg_offsets = [0.] * 6
      self.leg_velocities = [0.] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_6f().pack(*self.amplitudes))
      buff.write(_get_struct_6f().pack(*self.frequencies))
      buff.write(_get_struct_6f().pack(*self.phase_offsets))
      buff.write(_get_struct_6f().pack(*self.leg_offsets))
      buff.write(_get_struct_6f().pack(*self.leg_velocities))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.amplitudes = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.frequencies = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.phase_offsets = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.leg_offsets = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.leg_velocities = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.amplitudes.tostring())
      buff.write(self.frequencies.tostring())
      buff.write(self.phase_offsets.tostring())
      buff.write(self.leg_offsets.tostring())
      buff.write(self.leg_velocities.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.amplitudes = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.frequencies = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.phase_offsets = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.leg_offsets = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.leg_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
