# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/StateMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class StateMsg(genpy.Message):
  _md5sum = "8f3da9637657db8621e960d32a985a35"
  _type = "aquacore/StateMsg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 LED
int32 Gait

float32 RollAngle
float32 PitchAngle
float32 YawAngle

float32 RollTargetAngle
float32 PitchTargetAngle
float32 YawTargetAngle
float32 DepthTarget

float32 AvgRollCommand
float32 AvgPitchCommand
float32 AvgYawCommand
float32 AvgHeaveCommand
float32 AvgSurgeCommand

int32 AutopilotMode
float32 Depth
float32 Speed

float32[] LegCurrents


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','LED','Gait','RollAngle','PitchAngle','YawAngle','RollTargetAngle','PitchTargetAngle','YawTargetAngle','DepthTarget','AvgRollCommand','AvgPitchCommand','AvgYawCommand','AvgHeaveCommand','AvgSurgeCommand','AutopilotMode','Depth','Speed','LegCurrents']
  _slot_types = ['std_msgs/Header','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','float32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,LED,Gait,RollAngle,PitchAngle,YawAngle,RollTargetAngle,PitchTargetAngle,YawTargetAngle,DepthTarget,AvgRollCommand,AvgPitchCommand,AvgYawCommand,AvgHeaveCommand,AvgSurgeCommand,AutopilotMode,Depth,Speed,LegCurrents

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.LED is None:
        self.LED = 0
      if self.Gait is None:
        self.Gait = 0
      if self.RollAngle is None:
        self.RollAngle = 0.
      if self.PitchAngle is None:
        self.PitchAngle = 0.
      if self.YawAngle is None:
        self.YawAngle = 0.
      if self.RollTargetAngle is None:
        self.RollTargetAngle = 0.
      if self.PitchTargetAngle is None:
        self.PitchTargetAngle = 0.
      if self.YawTargetAngle is None:
        self.YawTargetAngle = 0.
      if self.DepthTarget is None:
        self.DepthTarget = 0.
      if self.AvgRollCommand is None:
        self.AvgRollCommand = 0.
      if self.AvgPitchCommand is None:
        self.AvgPitchCommand = 0.
      if self.AvgYawCommand is None:
        self.AvgYawCommand = 0.
      if self.AvgHeaveCommand is None:
        self.AvgHeaveCommand = 0.
      if self.AvgSurgeCommand is None:
        self.AvgSurgeCommand = 0.
      if self.AutopilotMode is None:
        self.AutopilotMode = 0
      if self.Depth is None:
        self.Depth = 0.
      if self.Speed is None:
        self.Speed = 0.
      if self.LegCurrents is None:
        self.LegCurrents = []
    else:
      self.header = std_msgs.msg.Header()
      self.LED = 0
      self.Gait = 0
      self.RollAngle = 0.
      self.PitchAngle = 0.
      self.YawAngle = 0.
      self.RollTargetAngle = 0.
      self.PitchTargetAngle = 0.
      self.YawTargetAngle = 0.
      self.DepthTarget = 0.
      self.AvgRollCommand = 0.
      self.AvgPitchCommand = 0.
      self.AvgYawCommand = 0.
      self.AvgHeaveCommand = 0.
      self.AvgSurgeCommand = 0.
      self.AutopilotMode = 0
      self.Depth = 0.
      self.Speed = 0.
      self.LegCurrents = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i12fi2f().pack(_x.LED, _x.Gait, _x.RollAngle, _x.PitchAngle, _x.YawAngle, _x.RollTargetAngle, _x.PitchTargetAngle, _x.YawTargetAngle, _x.DepthTarget, _x.AvgRollCommand, _x.AvgPitchCommand, _x.AvgYawCommand, _x.AvgHeaveCommand, _x.AvgSurgeCommand, _x.AutopilotMode, _x.Depth, _x.Speed))
      length = len(self.LegCurrents)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.LegCurrents))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.LED, _x.Gait, _x.RollAngle, _x.PitchAngle, _x.YawAngle, _x.RollTargetAngle, _x.PitchTargetAngle, _x.YawTargetAngle, _x.DepthTarget, _x.AvgRollCommand, _x.AvgPitchCommand, _x.AvgYawCommand, _x.AvgHeaveCommand, _x.AvgSurgeCommand, _x.AutopilotMode, _x.Depth, _x.Speed,) = _get_struct_2i12fi2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.LegCurrents = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2i12fi2f().pack(_x.LED, _x.Gait, _x.RollAngle, _x.PitchAngle, _x.YawAngle, _x.RollTargetAngle, _x.PitchTargetAngle, _x.YawTargetAngle, _x.DepthTarget, _x.AvgRollCommand, _x.AvgPitchCommand, _x.AvgYawCommand, _x.AvgHeaveCommand, _x.AvgSurgeCommand, _x.AutopilotMode, _x.Depth, _x.Speed))
      length = len(self.LegCurrents)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.LegCurrents.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.LED, _x.Gait, _x.RollAngle, _x.PitchAngle, _x.YawAngle, _x.RollTargetAngle, _x.PitchTargetAngle, _x.YawTargetAngle, _x.DepthTarget, _x.AvgRollCommand, _x.AvgPitchCommand, _x.AvgYawCommand, _x.AvgHeaveCommand, _x.AvgSurgeCommand, _x.AutopilotMode, _x.Depth, _x.Speed,) = _get_struct_2i12fi2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.LegCurrents = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i12fi2f = None
def _get_struct_2i12fi2f():
    global _struct_2i12fi2f
    if _struct_2i12fi2f is None:
        _struct_2i12fi2f = struct.Struct("<2i12fi2f")
    return _struct_2i12fi2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
