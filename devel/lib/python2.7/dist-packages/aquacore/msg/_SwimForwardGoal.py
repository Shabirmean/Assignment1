# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/SwimForwardGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SwimForwardGoal(genpy.Message):
  _md5sum = "8ab2a87faf8d41b41f51cfda0b7d6d34"
  _type = "aquacore/SwimForwardGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# BIG WARNING!!! It is potentially misleading that at the beginning the robot will turn
#                to the target yaw, and then swim straight from that point onwards.  

# Desired Goal
float64 duration     # in s
float64 speed        # in pseudo-unit-rate
float32 target_depth # in m; set to -1 to use robot's current depth
float32 target_yaw   # in deg; set to 361 to use robot's current yaw

"""
  __slots__ = ['duration','speed','target_depth','target_yaw']
  _slot_types = ['float64','float64','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       duration,speed,target_depth,target_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwimForwardGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.duration is None:
        self.duration = 0.
      if self.speed is None:
        self.speed = 0.
      if self.target_depth is None:
        self.target_depth = 0.
      if self.target_yaw is None:
        self.target_yaw = 0.
    else:
      self.duration = 0.
      self.speed = 0.
      self.target_depth = 0.
      self.target_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2f().pack(_x.duration, _x.speed, _x.target_depth, _x.target_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.duration, _x.speed, _x.target_depth, _x.target_yaw,) = _get_struct_2d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2f().pack(_x.duration, _x.speed, _x.target_depth, _x.target_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.duration, _x.speed, _x.target_depth, _x.target_yaw,) = _get_struct_2d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2f = None
def _get_struct_2d2f():
    global _struct_2d2f
    if _struct_2d2f is None:
        _struct_2d2f = struct.Struct("<2d2f")
    return _struct_2d2f
