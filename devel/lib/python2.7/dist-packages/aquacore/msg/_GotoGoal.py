# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aquacore/GotoGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GotoGoal(genpy.Message):
  _md5sum = "5fbff635c879e970e24112664f7e3eb1"
  _type = "aquacore/GotoGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Desired goal

# (x,y) denotes latitude and longitude respectively (in degrees)
# z denotes depth, > 0 above the water, 0 on the surface, < 0 underwater (in meters)
# orientation is currently not handled 
geometry_msgs/Pose target_waypoint

# True if we want to avoid a random step to initialize the global heading of the robot 
# and instead use the last known heading from the previous goal. 
# This is useful when we have a chain of goals to reach, one after the other, because
# it avoids ugly turns in the beginning of the trajectory towards the next goal..
bool   start_towards_last_bearing 

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['target_waypoint','start_towards_last_bearing']
  _slot_types = ['geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_waypoint,start_towards_last_bearing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GotoGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.target_waypoint is None:
        self.target_waypoint = geometry_msgs.msg.Pose()
      if self.start_towards_last_bearing is None:
        self.start_towards_last_bearing = False
    else:
      self.target_waypoint = geometry_msgs.msg.Pose()
      self.start_towards_last_bearing = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7dB().pack(_x.target_waypoint.position.x, _x.target_waypoint.position.y, _x.target_waypoint.position.z, _x.target_waypoint.orientation.x, _x.target_waypoint.orientation.y, _x.target_waypoint.orientation.z, _x.target_waypoint.orientation.w, _x.start_towards_last_bearing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.target_waypoint is None:
        self.target_waypoint = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.target_waypoint.position.x, _x.target_waypoint.position.y, _x.target_waypoint.position.z, _x.target_waypoint.orientation.x, _x.target_waypoint.orientation.y, _x.target_waypoint.orientation.z, _x.target_waypoint.orientation.w, _x.start_towards_last_bearing,) = _get_struct_7dB().unpack(str[start:end])
      self.start_towards_last_bearing = bool(self.start_towards_last_bearing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7dB().pack(_x.target_waypoint.position.x, _x.target_waypoint.position.y, _x.target_waypoint.position.z, _x.target_waypoint.orientation.x, _x.target_waypoint.orientation.y, _x.target_waypoint.orientation.z, _x.target_waypoint.orientation.w, _x.start_towards_last_bearing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.target_waypoint is None:
        self.target_waypoint = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.target_waypoint.position.x, _x.target_waypoint.position.y, _x.target_waypoint.position.z, _x.target_waypoint.orientation.x, _x.target_waypoint.orientation.y, _x.target_waypoint.orientation.z, _x.target_waypoint.orientation.w, _x.start_towards_last_bearing,) = _get_struct_7dB().unpack(str[start:end])
      self.start_towards_last_bearing = bool(self.start_towards_last_bearing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
