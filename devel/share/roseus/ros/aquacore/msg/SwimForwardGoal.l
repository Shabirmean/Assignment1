;; Auto-generated. Do not edit!


(when (boundp 'aquacore::SwimForwardGoal)
  (if (not (find-package "AQUACORE"))
    (make-package "AQUACORE"))
  (shadow 'SwimForwardGoal (find-package "AQUACORE")))
(unless (find-package "AQUACORE::SWIMFORWARDGOAL")
  (make-package "AQUACORE::SWIMFORWARDGOAL"))

(in-package "ROS")
;;//! \htmlinclude SwimForwardGoal.msg.html


(defclass aquacore::SwimForwardGoal
  :super ros::object
  :slots (_duration _speed _target_depth _target_yaw ))

(defmethod aquacore::SwimForwardGoal
  (:init
   (&key
    ((:duration __duration) 0.0)
    ((:speed __speed) 0.0)
    ((:target_depth __target_depth) 0.0)
    ((:target_yaw __target_yaw) 0.0)
    )
   (send-super :init)
   (setq _duration (float __duration))
   (setq _speed (float __speed))
   (setq _target_depth (float __target_depth))
   (setq _target_yaw (float __target_yaw))
   self)
  (:duration
   (&optional __duration)
   (if __duration (setq _duration __duration)) _duration)
  (:speed
   (&optional __speed)
   (if __speed (setq _speed __speed)) _speed)
  (:target_depth
   (&optional __target_depth)
   (if __target_depth (setq _target_depth __target_depth)) _target_depth)
  (:target_yaw
   (&optional __target_yaw)
   (if __target_yaw (setq _target_yaw __target_yaw)) _target_yaw)
  (:serialization-length
   ()
   (+
    ;; float64 _duration
    8
    ;; float64 _speed
    8
    ;; float32 _target_depth
    4
    ;; float32 _target_yaw
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _duration
       (sys::poke _duration (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _speed
       (sys::poke _speed (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float32 _target_depth
       (sys::poke _target_depth (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _target_yaw
       (sys::poke _target_yaw (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _duration
     (setq _duration (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _speed
     (setq _speed (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float32 _target_depth
     (setq _target_depth (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _target_yaw
     (setq _target_yaw (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get aquacore::SwimForwardGoal :md5sum-) "8ab2a87faf8d41b41f51cfda0b7d6d34")
(setf (get aquacore::SwimForwardGoal :datatype-) "aquacore/SwimForwardGoal")
(setf (get aquacore::SwimForwardGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# BIG WARNING!!! It is potentially misleading that at the beginning the robot will turn
#                to the target yaw, and then swim straight from that point onwards.  

# Desired Goal
float64 duration     # in s
float64 speed        # in pseudo-unit-rate
float32 target_depth # in m; set to -1 to use robot's current depth
float32 target_yaw   # in deg; set to 361 to use robot's current yaw


")



(provide :aquacore/SwimForwardGoal "8ab2a87faf8d41b41f51cfda0b7d6d34")


